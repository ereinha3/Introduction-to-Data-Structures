class Node(object):
    def __init__(self, data, left = None, right = None, parent = None, color = 'red'):
        self.data = data
        self.left = left
        self.right = right
        self.parent = parent
        self.color = color
    
class rb_tree(object):

    PREORDER = 1
    INORDER = 2
    POSTORDER = 3

    def __init__(self):
        self.root = None
        self.sentinel = Node(None, color = 'black')
        self.sentinel.parent = self.sentinel
        self.sentinel.left = self.sentinel
        self.sentinel.right = self.sentinel
    
    def left_rotate(self, x):
        y = x.right
        x.right = y.left
        if y.left!=None:
            y.left.parent = x
        y.parent = x.parent
        if x.parent == None:
            self.root = y
        elif x==x.parent.left:
            x.parent.left = y
        else:
            x.parent.right = y
        y.left = x
        x.parent = y
    
    def right_rotate(self, x):
        y = x.left
        x.left = y.right
        if y.right!=None:
            y.right.parent = x
        y.parent = x.parent
        if x.parent == None:
            self.root = y
        elif x==x.parent.right:
            x.parent.right = y
        else:
            x.parent.left = y
        y.right = x
        x.parent = y
        
    def insert(self, data):
        z = Node(data)
        x = self.root
        y = None
        while x!=None:
            y = x
            if data<x.data:
                x = x.left
            else:
                x = x.right
        z.parent = y
        if y == None:
            self.root = z
        elif data < y.data:
            y.left = z
        else:
            y.right = z
        z.left = None
        z.right = None
        z.color = "r"
        self.fix_up(z)
    
    def fix_up(self, z):
        while z.parent.color == "r":
            if z.parent == z.parent.parent.left:
                y = z.parent.parent.right
                if y.color == "r":
                    z.parent.color = "b"
                    y.color = "b"
                    z.parent.parent.color = "r"
                    z = z.parent.parent
                else:
                    if z == z.parent.right:
                        z = z.parent
                        self.left_rotate(z.parent.parent)
                    z.parent.color = "b"
                    z.parent.parent.color = "r"
                    self.right_rotate(z.parent.parent)
            else:
                y = z.parent.parent.left
                if y.color == "r":
                    z.parent.color = "b"
                    y.color = "b"
                    z.parent.parent.color = "r"
                    z = z.parent.parent
                else:
                    if z == z.parent.left:
                        z = z.parent
                        self.right_rotate(z)
                    z.parent.color = "b"
                    z.parent.parent.color = "r"
                    self.left_rotate(z.parent.parent)
        self.root.color = "b"
        

                    
            
        
    